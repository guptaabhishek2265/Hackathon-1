import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Button,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid,
  InputAdornment,
  Chip,
  TablePagination,
  Alert,
} from "@mui/material";
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Search as SearchIcon,
  Save as SaveIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  LocationOn as LocationIcon,
} from "@mui/icons-material";

const SupplierManagement = () => {
  // Mock supplier data
  const mockSuppliers = [
    {
      id: 1,
      name: "Tribal Art Collective",
      contact: "Rajesh Singh",
      email: "contact@tribalart.co.in",
      phone: "9876543210",
      address: "Jagdalpur, Bastar, Chhattisgarh",
      category: "Handicrafts",
      status: "Active",
    },
    {
      id: 2,
      name: "Chhattisgarh Textiles Ltd",
      contact: "Priya Sharma",
      email: "orders@chhattisgarhfabrics.com",
      phone: "8765432109",
      address: "Raipur, Chhattisgarh",
      category: "Textiles",
      status: "Active",
    },
    {
      id: 3,
      name: "Eco-Friendly Packaging",
      contact: "Amit Kumar",
      email: "info@ecofriendly.in",
      phone: "7654321098",
      address: "Bilaspur, Chhattisgarh",
      category: "Packaging",
      status: "Inactive",
    },
    {
      id: 4,
      name: "Premium Stationery Suppliers",
      contact: "Sunita Verma",
      email: "orders@premiumstationery.com",
      phone: "9567843210",
      address: "Delhi, India",
      category: "Stationery",
      status: "Active",
    },
    {
      id: 5,
      name: "Dhokra Art Association",
      contact: "Rakesh Baghel",
      email: "dhokraartcg@gmail.com",
      phone: "8876543210",
      address: "Kondagaon, Chhattisgarh",
      category: "Tribal Art",
      status: "Active",
    },
  ];

  const [suppliers, setSuppliers] = useState([]);
  const [filteredSuppliers, setFilteredSuppliers] = useState([]);
  const [search, setSearch] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [currentSupplier, setCurrentSupplier] = useState(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [supplierToDelete, setSupplierToDelete] = useState(null);
  const [addDialogOpen, setAddDialogOpen] = useState(false);
  const [newSupplier, setNewSupplier] = useState({
    name: "",
    contact: "",
    email: "",
    phone: "",
    address: "",
    category: "",
    status: "Active",
  });
  const [successMessage, setSuccessMessage] = useState("");

  // Load suppliers on mount
  useEffect(() => {
    // In a real app, you would fetch from an API
    setSuppliers(mockSuppliers);
  }, []);

  // Filter suppliers when search changes
  useEffect(() => {
    if (!suppliers.length) {
      setFilteredSuppliers([]);
      return;
    }

    const lowercasedSearch = search.toLowerCase();
    const filtered = suppliers.filter(
      (supplier) =>
        supplier.name.toLowerCase().includes(lowercasedSearch) ||
        supplier.contact.toLowerCase().includes(lowercasedSearch) ||
        supplier.category.toLowerCase().includes(lowercasedSearch) ||
        supplier.email.toLowerCase().includes(lowercasedSearch)
    );

    setFilteredSuppliers(filtered);
  }, [suppliers, search]);

  // Handle search change
  const handleSearchChange = (e) => {
    setSearch(e.target.value);
    setPage(0);
  };

  // Handle page change
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  // Handle rows per page change
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Open add supplier dialog
  const handleAddSupplier = () => {
    setAddDialogOpen(true);
  };

  // Close add supplier dialog
  const handleCloseAddDialog = () => {
    setAddDialogOpen(false);
    setNewSupplier({
      name: "",
      contact: "",
      email: "",
      phone: "",
      address: "",
      category: "",
      status: "Active",
    });
  };

  // Handle form field change in add dialog
  const handleAddFormChange = (e) => {
    const { name, value } = e.target;
    setNewSupplier({
      ...newSupplier,
      [name]: value,
    });
  };

  // Save new supplier
  const handleSaveNewSupplier = () => {
    const supplierToAdd = {
      ...newSupplier,
      id: suppliers.length + 1, // In a real app, the ID would be generated by the backend
    };

    // Add to local state
    setSuppliers([...suppliers, supplierToAdd]);

    // Show success message
    setSuccessMessage(`Supplier "${supplierToAdd.name}" added successfully.`);
    setTimeout(() => {
      setSuccessMessage("");
    }, 3000);

    // Close dialog
    handleCloseAddDialog();
  };

  // Open edit dialog
  const handleEditSupplier = (supplier) => {
    setCurrentSupplier({ ...supplier });
    setEditDialogOpen(true);
  };

  // Close edit dialog
  const handleCloseEditDialog = () => {
    setEditDialogOpen(false);
    setCurrentSupplier(null);
  };

  // Handle form field change in edit dialog
  const handleEditFormChange = (e) => {
    const { name, value } = e.target;
    setCurrentSupplier({
      ...currentSupplier,
      [name]: value,
    });
  };

  // Save supplier changes
  const handleSaveSupplier = () => {
    // Update in local state
    setSuppliers(
      suppliers.map((supplier) =>
        supplier.id === currentSupplier.id ? currentSupplier : supplier
      )
    );

    // Show success message
    setSuccessMessage(
      `Supplier "${currentSupplier.name}" updated successfully.`
    );
    setTimeout(() => {
      setSuccessMessage("");
    }, 3000);

    // Close dialog
    handleCloseEditDialog();
  };

  // Open delete confirmation dialog
  const handleDeleteClick = (supplier) => {
    setSupplierToDelete(supplier);
    setDeleteDialogOpen(true);
  };

  // Close delete dialog
  const handleCloseDeleteDialog = () => {
    setDeleteDialogOpen(false);
    setSupplierToDelete(null);
  };

  // Confirm supplier deletion
  const handleConfirmDelete = () => {
    // Remove from local state
    setSuppliers(
      suppliers.filter((supplier) => supplier.id !== supplierToDelete.id)
    );

    // Show success message
    setSuccessMessage(
      `Supplier "${supplierToDelete.name}" deleted successfully.`
    );
    setTimeout(() => {
      setSuccessMessage("");
    }, 3000);

    // Close dialog
    handleCloseDeleteDialog();
  };

  return (
    <Box>
      {/* Success message alert */}
      {successMessage && (
        <Alert
          severity="success"
          sx={{ mb: 2 }}
          onClose={() => setSuccessMessage("")}
        >
          {successMessage}
        </Alert>
      )}

      {/* Search and Add toolbar */}
      <Box sx={{ mb: 3, display: "flex", justifyContent: "space-between" }}>
        <TextField
          placeholder="Search suppliers..."
          value={search}
          onChange={handleSearchChange}
          variant="outlined"
          size="small"
          sx={{ width: "300px" }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            ),
          }}
        />
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleAddSupplier}
        >
          Add Supplier
        </Button>
      </Box>

      {/* Suppliers table */}
      <TableContainer component={Paper} sx={{ mb: 2 }}>
        <Table sx={{ minWidth: 800 }} size="medium">
          <TableHead>
            <TableRow sx={{ backgroundColor: "grey.50" }}>
              <TableCell>
                <Typography variant="subtitle2">Supplier Name</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">Contact Person</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">Contact Info</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">Address</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">Category</Typography>
              </TableCell>
              <TableCell>
                <Typography variant="subtitle2">Status</Typography>
              </TableCell>
              <TableCell align="right">
                <Typography variant="subtitle2">Actions</Typography>
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredSuppliers.length > 0 ? (
              filteredSuppliers
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((supplier) => (
                  <TableRow key={supplier.id} hover>
                    <TableCell>
                      <Typography variant="body2" fontWeight={500}>
                        {supplier.name}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {supplier.contact}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Box>
                        <Box
                          sx={{
                            display: "flex",
                            alignItems: "center",
                            mb: 0.5,
                          }}
                        >
                          <EmailIcon
                            fontSize="small"
                            sx={{ mr: 0.5, color: "text.secondary" }}
                          />
                          <Typography variant="body2">
                            {supplier.email}
                          </Typography>
                        </Box>
                        <Box sx={{ display: "flex", alignItems: "center" }}>
                          <PhoneIcon
                            fontSize="small"
                            sx={{ mr: 0.5, color: "text.secondary" }}
                          />
                          <Typography variant="body2">
                            {supplier.phone}
                          </Typography>
                        </Box>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: "flex", alignItems: "center" }}>
                        <LocationIcon
                          fontSize="small"
                          sx={{ mr: 0.5, color: "text.secondary" }}
                        />
                        <Typography variant="body2">
                          {supplier.address}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {supplier.category}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={supplier.status}
                        size="small"
                        color={
                          supplier.status === "Active" ? "success" : "default"
                        }
                        sx={{ minWidth: "80px" }}
                      />
                    </TableCell>
                    <TableCell align="right">
                      <IconButton
                        size="small"
                        color="primary"
                        onClick={() => handleEditSupplier(supplier)}
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                      <IconButton
                        size="small"
                        color="error"
                        onClick={() => handleDeleteClick(supplier)}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                  <Typography variant="body1" color="text.secondary">
                    No suppliers found
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filteredSuppliers.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />

      {/* Add Supplier Dialog */}
      <Dialog
        open={addDialogOpen}
        onClose={handleCloseAddDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Add New Supplier</DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="name"
                  label="Supplier Name"
                  value={newSupplier.name}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="contact"
                  label="Contact Person"
                  value={newSupplier.contact}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="email"
                  label="Email"
                  type="email"
                  value={newSupplier.email}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <EmailIcon fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="phone"
                  label="Phone"
                  value={newSupplier.phone}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PhoneIcon fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  name="address"
                  label="Address"
                  value={newSupplier.address}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <LocationIcon fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="category"
                  label="Category"
                  value={newSupplier.category}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  name="status"
                  label="Status"
                  select
                  value={newSupplier.status}
                  onChange={handleAddFormChange}
                  fullWidth
                  required
                  SelectProps={{
                    native: true,
                  }}
                >
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </TextField>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseAddDialog}>Cancel</Button>
          <Button
            onClick={handleSaveNewSupplier}
            variant="contained"
            color="primary"
            startIcon={<SaveIcon />}
            disabled={
              !newSupplier.name ||
              !newSupplier.contact ||
              !newSupplier.email ||
              !newSupplier.phone ||
              !newSupplier.address ||
              !newSupplier.category
            }
          >
            Add Supplier
          </Button>
        </DialogActions>
      </Dialog>

      {/* Edit Supplier Dialog */}
      <Dialog
        open={editDialogOpen}
        onClose={handleCloseEditDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Edit Supplier</DialogTitle>
        <DialogContent>
          {currentSupplier && (
            <Box sx={{ mt: 2 }}>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="name"
                    label="Supplier Name"
                    value={currentSupplier.name}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="contact"
                    label="Contact Person"
                    value={currentSupplier.contact}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="email"
                    label="Email"
                    type="email"
                    value={currentSupplier.email}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <EmailIcon fontSize="small" />
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="phone"
                    label="Phone"
                    value={currentSupplier.phone}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <PhoneIcon fontSize="small" />
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    name="address"
                    label="Address"
                    value={currentSupplier.address}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <LocationIcon fontSize="small" />
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="category"
                    label="Category"
                    value={currentSupplier.category}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    name="status"
                    label="Status"
                    select
                    value={currentSupplier.status}
                    onChange={handleEditFormChange}
                    fullWidth
                    required
                    SelectProps={{
                      native: true,
                    }}
                  >
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                  </TextField>
                </Grid>
              </Grid>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseEditDialog}>Cancel</Button>
          <Button
            onClick={handleSaveSupplier}
            variant="contained"
            color="primary"
            startIcon={<SaveIcon />}
            disabled={!currentSupplier}
          >
            Save Changes
          </Button>
        </DialogActions>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleCloseDeleteDialog}
        maxWidth="xs"
        fullWidth
      >
        <DialogTitle>Confirm Deletion</DialogTitle>
        <DialogContent>
          <Typography variant="body1">
            Are you sure you want to delete supplier "{supplierToDelete?.name}"?
            This action cannot be undone.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDeleteDialog}>Cancel</Button>
          <Button
            onClick={handleConfirmDelete}
            variant="contained"
            color="error"
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default SupplierManagement;
